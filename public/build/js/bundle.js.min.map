{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","respuesta","arrayPonentes","ponente","id","nombre","trim","apellido","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","elimininarTag","appendChild","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"CAAA,WAGA,GAFAA,SAAAC,cAAA,UAEA,CACA,IAAAC,EAAA,CACAC,aAAA,GACAC,IAAA,IAGA,MAAAC,EAAAL,SAAAC,cAAA,yBACAK,EAAAN,SAAAO,iBAAA,gBACAC,EAAAR,SAAAC,cAAA,mBACAQ,EAAAT,SAAAC,cAAA,oBAMA,SAAAS,EAAAC,GAEAT,EAAAS,EAAAC,OAAAC,MAAAF,EAAAC,OAAAE,MAGAL,EAAAK,MAAA,GACAN,EAAAM,MAAA,GAGA,MAAAC,EAAAf,SAAAC,cAAA,8BACAc,GACAA,EAAAC,UAAAC,OAAA,6BAGAC,OAAAC,OAAAjB,GAAAkB,SAAA,KAOAC,iBACA,MAAAlB,aAAAA,EAAAC,IAAAA,GAAAF,EAEAoB,EAAA,+BAAAlB,kBAAAD,IACAoB,QAAAC,MAAAF,IAMA,SAAAG,GAEA,MAAAC,EAAA1B,SAAAO,iBAAA,aAGAmB,EAAAC,QAAAC,GAAAA,EAAAZ,UAAAa,IAAA,+BAGA,MAAAC,EAAAL,EAAAM,IAAAC,GAAAA,EAAAC,SAGAC,EAAAC,MAAAC,KAAAV,GAGAQ,EAAAG,OAAAT,IAAAE,EAAAV,SAAAQ,EAAAU,QAAAC,SAGAZ,QAAAC,GAAAA,EAAAZ,UAAAC,OAAA,+BAGAjB,SAAAO,iBAAA,8CAEAoB,QAAAa,GAAAA,EAAAC,iBAAA,QAAAC,IAzBAC,OAFApB,EAAAqB,QATAC,GAuCA,SAAAH,EAAA/B,GAEA,MAAAI,EAAAf,SAAAC,cAAA,8BACAc,GACAA,EAAAC,UAAAC,OAAA,6BAIAN,EAAAC,OAAAI,UAAAa,IAAA,6BAGApB,EAAAK,MAAAH,EAAAC,OAAA0B,QAAAC,OAGA/B,EAAAM,MAAAd,SAAAC,cAAA,wBAAAa,MAzEAT,EAAAoC,iBAAA,SAAA/B,GACAJ,EAAAqB,QAAAvB,GAAAA,EAAAqC,iBAAA,SAAA/B,KAhBA,GCAA,WACA,MAAAoC,EAAA9C,SAAAC,cAAA,aAEA,GAAA6C,EAAA,CACA,IAAAC,EAAA,GACAC,EAAA,IAOA3B,iBAEA,MACA4B,QAAAzB,MADA,kBAOA,SAAA0B,EAAA,IACAH,EAAAG,EAAAnB,IAAAoB,IACA,CACAC,GAAAD,EAAAC,GACAC,OAAA,GAAAF,EAAAE,OAAAC,UAAAH,EAAAI,SAAAD,YAPAE,OAFAP,EAAAL,QATAa,GAGAX,EAAAL,iBAAA,SAoBA,SAAA9B,GACA,MAAAT,EAAAS,EAAAC,OAAAE,MACA,GAAAZ,EAAAwD,OAAA,EAAA,CACA,MAAAC,EAAA,IAAAC,OAAA1D,EAAA,KACA8C,EAAAD,EAAAV,OAAAc,IACA,IAAA,IAAAA,EAAAE,OAAAQ,cAAAC,OAAAH,GACA,OAAAR,SApCA,GCAA,WACA,MAAAY,EAAA/D,SAAAC,cAAA,eACA,GAAA8D,EAAA,CACA,MAAAC,EAAAhE,SAAAC,cAAA,SACAgE,EAAAjE,SAAAC,cAAA,iBACA,IAAAiE,EAAA,GAqBA,SAAAC,IACAH,EAAAI,YAAA,GACAF,EAAAvC,QAAA0C,IACA,MAAAC,EAAAtE,SAAAuE,cAAA,MACAD,EAAAtD,UAAAa,IAAA,mBACAyC,EAAAF,YAAAC,EACAC,EAAAE,WAAAC,EACAT,EAAAU,YAAAJ,KAGAK,IAGA,SAAAF,EAAA9D,GACAA,EAAAC,OAAAK,SACAiD,EAAAA,EAAA7B,OAAAgC,GAAAA,IAAA1D,EAAAC,OAAAwD,aACAO,IAGA,SAAAA,IACAV,EAAAnD,MAAAoD,EAAAU,WAtCA,KAAAX,EAAAnD,QACAoD,EAAAD,EAAAnD,MAAA+D,MAAA,KACAV,KAIAJ,EAAAtB,iBAAA,YAEA,SAAA9B,GACA,GAAA,KAAAA,EAAAmE,QAAA,CACA,GAAA,KAAAnE,EAAAC,OAAAE,MAAAwC,QAAA3C,EAAAC,OAAAE,MAAA,EAAA,OACAH,EAAAoE,iBACAb,EAAA,IAAAA,EAAAvD,EAAAC,OAAAE,MAAAwC,QACAS,EAAAjD,MAAA,GACAqD,SAtBA","file":"bundle.js","sourcesContent":["(function() {\r\n    const horas = document.querySelector(\"#horas\")\r\n\r\n    if(horas) {\r\n        let busqueda = {\r\n            categoria_id: \"\",\r\n            dia: \"\"\r\n        }\r\n\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]')   //select del tipo de evento\r\n        const dias = document.querySelectorAll('[name=\"dia\"]')  //inputs radio\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]')\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]')\r\n\r\n        //cuando se detecte cambios en el select de categoria o en el input de dia, envio sus values al objeto\r\n        categoria.addEventListener(\"change\", terminoBusqueda)\r\n        dias.forEach(dia => dia.addEventListener(\"change\", terminoBusqueda))\r\n\r\n        function terminoBusqueda(e) {\r\n            //Guardo el value del elemento html en el objeto\r\n            busqueda[e.target.name] = e.target.value\r\n\r\n            //Reiniciar los campos ocultos\r\n            inputHiddenHora.value = \"\"\r\n            inputHiddenDia.value = \"\"\r\n\r\n            //Deshabilitar estilos de la hora seleccionada anteriormente si hay un nuevo click en dias o categoria\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\")\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\")\r\n            }\r\n            \r\n            if(Object.values(busqueda).includes(\"\")) {\r\n                return\r\n            }\r\n            buscarEventos()\r\n        }\r\n        \r\n        //si el objeto de busqueda tiene las 2 keys con valor\r\n        async function buscarEventos() {\r\n            const {categoria_id, dia} = busqueda\r\n            \r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`\r\n            const resultado = await fetch(url)  //le hago un get a la url\r\n            const eventos = await resultado.json()  //consumo los datos provenientes del echo del APIEventos.php\r\n            \r\n            obtenerHorasDisponibles(eventos)\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            //Selecciono todos los li de horas\r\n            const listadoHoras = document.querySelectorAll(\"#horas li\")\r\n\r\n            //Le añado la clase a todos los li\r\n            listadoHoras.forEach(li => li.classList.add(\"horas__hora--deshabilitada\"))            \r\n\r\n            //Recorro los eventos y guardo las id de sus horas\r\n            const horasTomadas = eventos.map(evento => evento.hora_id)\r\n\r\n            //Convierto el listadoHoras que es un NodeList a un array\r\n            const listadoHorasArray = Array.from(listadoHoras)  \r\n\r\n            //Filtro todas las horas que no existan en horasTomadas\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId)) //dataset hace referencia a el atributo personalizado llamado \"data-hora-id\" en el li del formulario\r\n            \r\n            //A cada hora disponible le saco la clase --deshabilitada por default para que se vean como disponibles gracias a css\r\n            resultado.forEach(li => li.classList.remove(\"horas__hora--deshabilitada\"))\r\n\r\n            //selecciono todos los li de horas que no tengan la clase --deshabilitada para que solo esos li puedan reaccionar a un event\r\n            const horasDisponibles = document.querySelectorAll(\"#horas li:not(.horas__hora--deshabilitada)\") \r\n\r\n            horasDisponibles.forEach(hora => hora.addEventListener(\"click\", seleccionarHora))\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            //Deshabilitar la hora seleccionada anteriormente si hay un nuevo click\r\n            const horaPrevia = document.querySelector(\".horas__hora--seleccionada\")\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove(\"horas__hora--seleccionada\")\r\n            }\r\n\r\n            //Agregar clase a la hora seleccionada\r\n            e.target.classList.add(\"horas__hora--seleccionada\") //agrego la clase al li que clickee\r\n\r\n            //Agregar id de la hora al campo oculto\r\n            inputHiddenHora.value = e.target.dataset.horaId //dataset hace referencia a el atributo personalizado llamado \"data-hora-id\" en el li del formulario\r\n\r\n            //Agregar id del dia al campo oculto\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value //selecciono el elemento con name=dia pero que sea el que está clickeado\r\n        }\r\n    }\r\n}) ();","(function () {\r\n    const ponentesInput = document.querySelector(\"#ponentes\")\r\n\r\n    if(ponentesInput) {\r\n        let ponentes = []\r\n        let ponentesFiltrados = []\r\n\r\n        obtenerPonentes()\r\n\r\n        //Cuando se escriba en el input\r\n        ponentesInput.addEventListener(\"input\", buscarPonentes)\r\n\r\n        async function obtenerPonentes() {\r\n            \r\n            const url = `/api/ponentes`\r\n            const respuesta = await fetch(url) \r\n            const resultado = await respuesta.json()\r\n            \r\n            formatearPonentes(resultado)\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {    //inicio el array vacio si no existe resultado\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {    //en el array de ponentes solo coloco los datos que necesito\r\n                    id: ponente.id,\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value\r\n            if(busqueda.length > 3) {   //si ya ingresé mas de 3 letras en el input\r\n                const expresion = new RegExp(busqueda, \"i\") //creo una nueva expresion regular, con \"i\" le digo que no importa si escribo con mayus o min\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if(ponente.nombre.toLowerCase().search(expresion) !== -1) { //.search() devuelve -1 si no se encuentran coincidencias, sino devuelve 0. Se usa .search() porque se usa RegExp\r\n                        return ponente; //guardo el objeto entero en el el array de filtrados\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}) ();","(function () {  //esta funcion encerrada en parentesis se llama iife. Esta funcion se ejecuta solo si la pagina donde estoy hay un input con ese id, en las demas paginas no se ejecuta\r\n    const tagsInput = document.querySelector(\"#tags_input\")\r\n    if(tagsInput) {\r\n        const tagsDiv = document.querySelector(\"#tags\")\r\n        const tagsInputHidden = document.querySelector(\"[name='tags']\")\r\n        let tags = []\r\n\r\n        //Recuperar del input oculto\r\n        if(tagsInputHidden.value !== \"\") {\r\n            tags = tagsInputHidden.value.split(\",\") //el value del input oculto que viene de la bd en forma de string lo convierto a array\r\n            mostrarTags()\r\n        }\r\n\r\n        //Escuchar los cambios en el input. keypress es escuchar al ingreso de letras\r\n        tagsInput.addEventListener(\"keypress\", guardarTag)\r\n\r\n        function guardarTag(e) {\r\n            if(e.keyCode === 44) {  //detecta el ingreso de una ,\r\n                if(e.target.value.trim() === \"\" || e.target.value <1) return    //si se ingresaron solo espacios, no agrega nada al array\r\n                e.preventDefault()  //cuando presione una coma, no la agrega al formulario. Con esto elimino la , luego de ingresarla en el input\r\n                tags = [...tags, e.target.value.trim()] //guardo en el array cada palabra\r\n                tagsInput.value = \"\"    //vacío el input luego de ingresar la palabra\r\n                mostrarTags()\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = \"\";\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement(\"LI\")   //creo un <li> por cada elemento en el array\r\n                etiqueta.classList.add(\"formulario__tag\")\r\n                etiqueta.textContent = tag  //le agrego el elemento al li\r\n                etiqueta.ondblclick = elimininarTag //cuando haga doble click\r\n                tagsDiv.appendChild(etiqueta)   //le agrego todas las li al div\r\n            })\r\n            \r\n            actualizarInputHidden()\r\n        }\r\n\r\n        function elimininarTag(e) {\r\n            e.target.remove()   //elimino el li\r\n            tags = tags.filter(tag => tag !== e.target.textContent) //elimino el tag del arreglo filtrando los que sean distintos del contenido del li\r\n            actualizarInputHidden()\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString() //coloco todos lo que haya en el array de tags en el value del input oculto\r\n        }\r\n    }\r\n}) ();"]}